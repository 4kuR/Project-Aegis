#!/bin/bash

# Function to clean up processes
cleanup() {
    echo "Stopping processes..."
    kill "$PHP_SERVER_PID" 2>/dev/null
    kill "$NPM_PID" 2>/dev/null

    # Cleanup logs
    rm -rf "$LOG_DIR"
    exit 0
}

# Trap SIGINT and SIGTERM signals to run cleanup
trap cleanup SIGINT SIGTERM

# Function to display usage instructions
display_usage() {
    echo "Usage: $0"
    echo "This script updates system packages, selects a project folder, and runs the PHP server and npm."
    echo "Make sure you have npm and PHP installed."
}

# Update the system packages in a subshell with user confirmation
update_system_packages() {
    read -p "Do you want to update system packages? (y/n): " confirm
    if [[ "$confirm" != "y" ]]; then
        echo "Skipping system package update."
        return
    fi

    echo "Updating system packages..."
    konsole --new-tab -e bash -c "sudo apt update && sudo apt upgrade -y; exit"
    if [[ $? -ne 0 ]]; then
        echo "Error: System packages update failed."
        exit 1
    fi
}

# Function to display menu and select a folder inside public_html
select_project() {
    local options=()
    local index=1

    echo "Searching for folders directly inside 'public_html' directories within your home directory..."

    # Find all folders directly inside public_html folders
    while IFS= read -r dir; do
        if [ -d "$dir" ]; then
            options+=("$dir")
        fi
    done < <(find "$HOME" -type d -name "public_html" -exec find {} -mindepth 1 -maxdepth 1 -type d \;)

    # If no folders are found inside public_html
    if [ ${#options[@]} -eq 0 ]; then
        echo "No subdirectories found inside public_html directories."
        exit 1
    fi

    echo "Select a project folder:"

    # Display menu options for each folder
    for option in "${options[@]}"; do
        echo "$index) $option"
        ((index++))
    done

    # Ask user for input
    read -p "Enter the number of your project: " choice

    # Check if the choice is valid
    if [[ "$choice" -ge 1 && "$choice" -le ${#options[@]} ]]; then
        PROJECT_DIR="${options[$((choice - 1))]}"
    else
        echo "Invalid selection. Exiting."
        exit 1
    fi
}

# Check if npm is installed globally
check_npm_installed() {
    if ! command -v npm &>/dev/null; then
        echo "npm is not installed. Please install npm before proceeding."
        exit 1
    fi
}

# Check if npm dependencies are installed, and if not, install them
check_npm_dependencies() {
    if [ ! -f "package.json" ]; then
        echo "Error: 'package.json' not found in the project directory: $PROJECT_DIR"
        exit 1
    fi

    if [ ! -d "node_modules" ]; then
        echo "npm dependencies are missing. Running 'npm install'..."
        konsole --new-tab -e bash -c "npm install; exit"
        wait
    fi
}

# Create a log directory
create_log_directory() {
    LOG_DIR="$PROJECT_DIR/logs"
    mkdir -p "$LOG_DIR"
    echo "Log directory created at $LOG_DIR."
}

# Function to backup environment variables
backup_environment_variables() {
    env > "$LOG_DIR/env_backup.txt"
    echo "Backup of environment variables saved to $LOG_DIR/env_backup.txt."
}

# Function to start PHP server and NPM process
start_processes() {
    # Default ports
    PHP_PORT=8000
    NPM_PORT=3000

    # Start timing
    START_TIME=$(date +%s)

    # Open a new Konsole tab and start the PHP server
    konsole --new-tab -e bash -c "php artisan serve --port=$PHP_PORT; read -p 'Press enter to exit...'" &
    PHP_SERVER_PID=$!

    # Wait for a few seconds to check if the process is starting
    sleep 5
    if ! kill -0 "$PHP_SERVER_PID" 2>/dev/null; then
        echo "Error: PHP server failed to start."
        cleanup
    fi

    # Open a new Konsole tab and run the npm command
    konsole --new-tab -e bash -c "npm run dev; read -p 'Press enter to exit...'" &
    NPM_PID=$!

    # Wait for a few seconds to check if the process is starting
    sleep 5
    if ! kill -0 "$NPM_PID" 2>/dev/null; then
        echo "Error: NPM process failed to start."
        cleanup
    fi

    # End timing
    END_TIME=$(date +%s)
    LOAD_TIME=$((END_TIME - START_TIME))

    echo "Both processes started successfully in $LOAD_TIME seconds."
}

# Wait for the update to complete
wait

# Display usage instructions
display_usage

# Update system packages
update_system_packages

# Check if npm is installed globally
check_npm_installed

# Select a project folder after the update
select_project

# Navigate to the selected project directory
cd "$PROJECT_DIR" || exit 1

# Create a log directory
create_log_directory

# Backup environment variables
backup_environment_variables

# Check if npm dependencies are installed
check_npm_dependencies

# Set environment variables (if needed)
# export ENV_VAR_NAME=value

# Start processes
start_processes

# Loop to wait for any of the processes to finish
while true; do
    # Check if either process is still running
    if ! kill -0 "$PHP_SERVER_PID" 2>/dev/null; then
        echo "PHP server has exited."
        cleanup
    fi

    if ! kill -0 "$NPM_PID" 2>/dev/null; then
        echo "NPM process has exited."
        cleanup
    fi

    # Sleep for a short while to avoid busy waiting
    sleep 1
done
